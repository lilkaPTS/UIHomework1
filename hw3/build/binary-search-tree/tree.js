class Node{constructor(t,e,l,i){this._key=t,this._data=e,this._lChild=l,this._rChild=i}get key(){return this._key}set key(t){this._key=t}get data(){return this._data}set data(t){this._data=t}get lChild(){return this._lChild}set lChild(t){this._lChild=t}get rChild(){return this._rChild}set rChild(t){this._rChild=t}}class Tree{constructor(){this._root=null}get(t){let e=this._root;for(;;){if(null==e)return null;if(t==e.key)return e.data;e=t<e.key?e.lChild:e.rChild}}remove(t){}insert(e,t){var l=new Node(e,t,null,null);if(null!=this._root){let t=this._root;for(;;){if(e==t.key)return;if(e<t.key){if(null==t.lChild)return void(t.lChild=l);t=t.lChild}else{if(null==t.rChild)return void(t.rChild=l);t=t.rChild}}}else this._root=l}print(t){var l;if("c"!=t){this.clearTable();let t=document.createElement("table");t.setAttribute("id","table"),document.getElementById("tableHere").appendChild(t)}let i=[];i[0]=this._root,this._root&&("c"==t?console.log(`	`+this._root.key):this.htmlPrinter(i,0));let r=0;for(;;){let e=[];for(let t=0;t<i.length;t++)e[e.length]=(null===(l=i[t])||void 0===l?void 0:l.lChild)||null,e[e.length]=(null===(l=i[t])||void 0===l?void 0:l.rChild)||null;if(r++,!this.isNull(e))break;"c"==t?this.consolePrinter(e):this.htmlPrinter(e,r),i=e}}clearTable(){let t=document.getElementById("table");null!=t&&t.remove()}isNull(e){for(let t=0;t<e.length;t++)if(null!=e[t])return!0;return!1}getLevel(t){return null!=t?1+Math.max(this.getLevel(t.lChild),this.getLevel(t.rChild)):0}htmlPrinter(l,i){var r;let t=document.getElementById("table"),n=document.createElement("tr");for(let e=0;e<l.length;e++)if(null==l[e]){let t=document.createElement("td");t.appendChild(document.createTextNode(" ")),this._root&&t.setAttribute("colspan",String(Math.pow(2,this.getLevel(this._root)-1-i))),n.appendChild(t)}else{let t=document.createElement("td");t.appendChild(document.createTextNode("("+(null===(r=l[e])||void 0===r?void 0:r.key)+";"+(null===(r=l[e])||void 0===r?void 0:r.data)+")")),this._root&&t.setAttribute("colspan",String(Math.pow(2,this.getLevel(this._root)-1-i))),n.appendChild(t)}t.appendChild(n)}consolePrinter(e){var l;let i="";for(let t=0;t<e.length;t++)null==e[t]?i+="0\t":i+=(null===(l=e[t])||void 0===l?void 0:l.key)+"\t";console.log(i)}}export{Tree};